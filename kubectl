vagrant@master-1:~$ kubectl get pods -l app=hostnames -o go-template='{{range .items}}{{.status.podIP}}{{"\n"}}{{end}}'
192.168.xx.55
192.168.xx.44
192.168.xx.61


kubectl get nodes -o yaml | egrep '\sname:|cpu:|memory:' to find out node's cpu and memory, note "egrep" for extended regex grep and it should be replaced by grep -E option


vagrant@master-1:~$ kubectl get nodes -o yaml | grep -E '\sname:|cpu:|memory:'
    name: master-1
      cpu: "2"
      memory: 1938300Ki
      cpu: "2"
      memory: 2040700Ki
    name: worker-1
      cpu: "1"
      memory: 390212Ki
      cpu: "1"
      memory: 492612Ki


kubectl get nodes -o json | jq '.items[] | {name: .metadata.name, cap: .status.capacity}'

vagrant@master-1:~$ kubectl get nodes -o json | jq '.items[] | {name: .metadata.name, cap: .status.capacity}'
{
  "name": "master-1",
  "cap": {
    "cpu": "2",
    "ephemeral-storage": "40593612Ki",
    "hugepages-2Mi": "0",
    "memory": "2040700Ki",
    "pods": "110"
  }
}
{
  "name": "worker-1",
  "cap": {
    "cpu": "1",
    "ephemeral-storage": "40593612Ki",
    "hugepages-2Mi": "0",
    "memory": "492612Ki",
    "pods": "110"
  }
}

kubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh

kubectl exec <POD-NAME> -c <CONTAINER-NAME> -- <COMMAND>

kubectl create deployment hostnames --image=k8s.gcr.io/serve_hostname

kubectl scale deployment hostnames --replicas=3

kubectl expose deployment hostnames --port=80 --target-port=9376


jq cheat sheet link:  https://gist.github.com/olih/f7437fb6962fb3ee9fe95bda8d2c8fa4

wget -qO- 10.0.1.175:80


To get a list of all API resources which can/cannot be put in namespaces:
kubectl api-resources --namespaced=true | head
kubectl api-resources --namespaced=false | head

To debug pod with multi-containers:
kubectl exec -it POD1 --container CONTAINER1 -- /bin/bash
kubectl exec -it POD1 --container CONTAINER2 -- /bin/bash

To debug pod with single container running:
kubectl exec -it POD1 -- /bin/bash

Immediately force deletion of pod:
kubectl delete pod POD1 --grace-period=0 --force


Deploy and rollement:
kubectl set image deployment DEPLOY1 hello-world=new-image-version --record
kubectl apply -f hello-worlk.yaml --record

Check status of deployment:
kubectl rollout status deployment DEPLOY1            if success, it exists 0.   if "echo $?" then, 0
kubectl describe deployment DEPLOY1

Pause a rollout of deployment:
kubectl rollout pause deployment DEPLOY1

Check rollout history:
kubectl rollout history deployment DEPLOY1

undo to previous deployment:
kubectl rollout undo deployment DEPLOY1

rollback to one revision:
kubectl rollout undo deployment DEPLOY1 --to-revision=1

restart a deployment: used when new environment changes require restart of PODs to sync up, in the case, new replicateSet will be created for restarted PODs
kubectl rollout restart deployment DEPLOY1

To find my first pod's name for my hello-world pods:
MYPOD=$(kubectl get pods -l app=hello-world | grep hello-world | head -n 1 | awk '{print $1}')












