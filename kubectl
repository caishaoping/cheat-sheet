vagrant@master-1:~$ kubectl get pods -l app=hostnames -o go-template='{{range .items}}{{.status.podIP}}{{"\n"}}{{end}}'
192.168.xx.55
192.168.xx.44
192.168.xx.61


kubectl get nodes -o yaml | egrep '\sname:|cpu:|memory:' to find out node's cpu and memory, note "egrep" for extended regex grep and it should be replaced by grep -E option


vagrant@master-1:~$ kubectl get nodes -o yaml | grep -E '\sname:|cpu:|memory:'
    name: master-1
      cpu: "2"
      memory: 1938300Ki
      cpu: "2"
      memory: 2040700Ki
    name: worker-1
      cpu: "1"
      memory: 390212Ki
      cpu: "1"
      memory: 492612Ki


kubectl get nodes -o json | jq '.items[] | {name: .metadata.name, cap: .status.capacity}'

vagrant@master-1:~$ kubectl get nodes -o json | jq '.items[] | {name: .metadata.name, cap: .status.capacity}'
{
  "name": "master-1",
  "cap": {
    "cpu": "2",
    "ephemeral-storage": "40593612Ki",
    "hugepages-2Mi": "0",
    "memory": "2040700Ki",
    "pods": "110"
  }
}
{
  "name": "worker-1",
  "cap": {
    "cpu": "1",
    "ephemeral-storage": "40593612Ki",
    "hugepages-2Mi": "0",
    "memory": "492612Ki",
    "pods": "110"
  }
}

kubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh

kubectl exec <POD-NAME> -c <CONTAINER-NAME> -- <COMMAND>

kubectl create deployment hostnames --image=k8s.gcr.io/serve_hostname

kubectl scale deployment hostnames --replicas=3

kubectl expose deployment hostnames --port=80 --target-port=9376


jq cheat sheet link:  https://gist.github.com/olih/f7437fb6962fb3ee9fe95bda8d2c8fa4

wget -qO- 10.0.1.175:80


To get a list of all API resources which can/cannot be put in namespaces:
kubectl api-resources --namespaced=true | head
kubectl api-resources --namespaced=false | head

To debug pod with multi-containers:
kubectl exec -it POD1 --container CONTAINER1 -- /bin/bash
kubectl exec -it POD1 --container CONTAINER2 -- /bin/bash

To debug pod with single container running:
kubectl exec -it POD1 -- /bin/bash

Immediately force deletion of pod:
kubectl delete pod POD1 --grace-period=0 --force


Deploy and rollement:
kubectl set image deployment DEPLOY1 hello-world=new-image-version --record
kubectl apply -f hello-worlk.yaml --record

Check status of deployment:
kubectl rollout status deployment DEPLOY1            if success, it exists 0.   if "echo $?" then, 0
kubectl describe deployment DEPLOY1

Pause a rollout of deployment:
kubectl rollout pause deployment DEPLOY1

Check rollout history:
kubectl rollout history deployment DEPLOY1

undo to previous deployment:
kubectl rollout undo deployment DEPLOY1

rollback to one revision:
kubectl rollout undo deployment DEPLOY1 --to-revision=1

restart a deployment: used when new environment changes require restart of PODs to sync up, in the case, new replicateSet will be created for restarted PODs
kubectl rollout restart deployment DEPLOY1

To find my first pod's name for my hello-world pods:
MYPOD=$(kubectl get pods -l app=hello-world | grep hello-world | head -n 1 | awk '{print $1}')

To find out pod's status, like "Running":
kubectl get pod mypod -n mynamespace -o json | jq .status.phase
"Running"

alias k=kubectl                         # will already be pre-configured

export do="--dry-run=client -o yaml"    # k create deploy nginx --image=nginx $do

export now="--force --grace-period 0"   # k delete pod x $now

Vim
The following settings will already be configured in your real exam environment in ~/.vimrc.
set tabstop=2
set expandtab
set shiftwidth=2

docker command:


helm command:

Helm Chart: Kubernetes YAML template-files combined into a single package, Values allow customisation

Helm Release: Installed instance of a Chart

Helm Values: Allow to customise the YAML template-files in a Chart when creating a Release

➜ helm -n mercury ls

➜ helm -n mercury uninstall internal-issue-report-apiv1
release "internal-issue-report-apiv1" uninstalled

➜ helm repo list
NAME    URL                               
bitnami https://charts.bitnami.com/bitnami

➜ helm repo update

➜ helm search repo nginx

➜ helm -n mercury upgrade internal-issue-report-apiv2 bitnami/nginx

➜ helm -n mercury ls -a

vim:
To indent multiple lines using vim you should set the shiftwidth using :set shiftwidth=2. Then mark multiple lines using Shift v and the up/down keys.

To then indent the marked lines press > or < and to repeat the action press .

Vim
Be great with vim.

toggle vim line numbers

When in vim you can press Esc and type :set number or :set nonumber followed by Enter to toggle line numbers. This can be useful when finding syntax errors based on line - but can be bad when wanting to mark&copy by mouse. You can also just jump to a line number with Esc :22 + Enter.

copy&paste

Get used to copy/paste/cut with vim:

Mark lines: Esc+V (then arrow keys)
Copy marked lines: y
Cut marked lines: d
Past lines: p or P
Indent multiple lines

To indent multiple lines press Esc and type :set shiftwidth=2. First mark multiple lines using Shift v and the up/down keys. Then to indent the marked lines press > or <. You can then press . to repeat the action.

Quickest way to create resources:

storageclass, pv, pvc,   from kubernetes document sample
pod, deploy, svc, from kubectl and then amend with sample

➜ k -n mercury logs cleaner-576967576c-cqtgx -c logger-con

➜ k -n mars get all

what is endpoint?

service can be accessed via "service-name.namespace" url, like 
Short manager-api-svc.mars or long manager-api-svc.mars.svc.cluster.local work.

➜ k run tmp --restart=Never --rm -i --image=nginx:alpine -- curl -m 5 manager-api-svc.mars:4444

➜ k -n venus exec frontend-789cbdc677-c9v8h -- wget -O- www.google.com

➜ k -n venus exec frontend-789cbdc677-c9v8h -- wget -O- www.google.de 
Connecting to www.google.de:2222 (216.58.207.67:80)
^C

➜ k -n venus exec frontend-789cbdc677-c9v8h -- wget -O- -T 5 www.google.de:80 
Connecting to www.google.com (172.217.203.104:80)
wget: download timed out
command terminated with exit code 1


















